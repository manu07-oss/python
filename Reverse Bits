Given a number x, reverse its binary form and return the answer in decimal.

Example 1:

Input:
x = 1
Output:
2147483648 
Explanation:
Binary of 1 in 32 bits representation-
00000000000000000000000000000001
Reversing the binary form we get, 
10000000000000000000000000000000,
whose decimal value is 2147483648.
Example 2:

Input:
x = 5
Output:
2684354560 
Explanation:
Binary of 5 in 32 bits representation-
00000000000000000000000000000101
Reversing the binary form we get, 
10100000000000000000000000000000,
whose decimal value is 2684354560.
Your Task:
You don't need to read input or print anything. Your task is to complete the function reversedBits() which takes an Integer x as input and returns the reverse binary form of x in decimal form.

Expected Time Complexity: O(log (x))
Expected Auxiliary Space: O(1)

Constraints:
0  <=  x  <  232


solution 
def reversedBits(x):
    result = 0
    # Number of bits in a 32-bit representation
    num_bits = 32
    
    for _ in range(num_bits):
        result <<= 1  # Left shift result by 1 position
        
        if x & 1:  # Check if LSB of x is 1
            result |= 1  # Set LSB of result to 1
        
        x >>= 1  # Right shift x by 1 position
    
    return result

# Test cases
print(reversedBits(1))  # Output: 2147483648
print(reversedBits(5))  # Output: 2684354560
